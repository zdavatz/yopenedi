/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ywesee.java.yopenedi.cli;

import com.ywesee.java.yopenedi.Edifact.*;
import com.ywesee.java.yopenedi.OpenTrans.Order;
import com.ywesee.java.yopenedi.common.Config;
import com.ywesee.java.yopenedi.converter.Converter;
import com.ywesee.java.yopenedi.converter.Pair;
import com.ywesee.java.yopenedi.converter.Writable;
import org.apache.commons.cli.*;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Properties;

public class App {
    public static void main(String[] args) throws Exception {
        Options options = new Options();

        Option outputOption = new Option(
                "o",
                "out",
                true,
                "The path to output. When in multiple mode, it will be a folder. If the --input flag is used and output is not specified, the default output path is <input filename>.xml. If -m is not present and -i is not used, the output will be standard output."
        );
        outputOption.setType(String.class);
        options.addOption(outputOption);

        Option inputOption = new Option("i", "in", true, "The path to input file - Stdin is used if this is not provided");
        outputOption.setType(String.class);
        options.addOption(inputOption);

        Option multipleOption = new Option("m", "multiple", false, "Whether to generate multiple xml files. An Edifact file can contain multiple orders, but in our specific use case we only need one. Please use this option if you prefer generating a folder of multiple XML files.");
        options.addOption(multipleOption);

        Option mergeCdOption = new Option(null, "no-merge-contact-details", false, "Prevent merging multiple <CONTACT_DETAILS>");
        options.addOption(mergeCdOption);

        Option helpOption = new Option("h", "help", false, "Display help message");
        options.addOption(helpOption);

        Option sendToOption = new Option(null, "mail-to", true, "Where to send the converted document");
        sendToOption.setType(String.class);
        options.addOption(sendToOption);

        Option sendFromOption = new Option(null, "mail-from", true, "Where to send the converted document");
        sendFromOption.setType(String.class);
        options.addOption(sendFromOption);

        Option usernameOption = new Option(null, "mail-username", true, "Username for SMTP");
        usernameOption.setType(String.class);
        options.addOption(usernameOption);

        Option passwordOption = new Option(null, "mail-password", true, "Password for SMTP");
        passwordOption.setType(String.class);
        options.addOption(passwordOption);

        Option hostOption = new Option(null, "mail-host", true, "Host for SMTP");
        hostOption.setType(String.class);
        options.addOption(hostOption);

        Option portOption = new Option(null, "mail-port", true, "Port for SMTP");
        portOption.setType(String.class);
        options.addOption(portOption);

        Option subjectOption = new Option(null, "mail-subject", true, "Subject for email");
        portOption.setType(String.class);
        options.addOption(subjectOption);

        Option secureOption = new Option(null, "mail-secure", false, "Use TLS for SMTP?");
        options.addOption(secureOption);

        Option debugOption = new Option(null, "debug", false, "Show debug messages");
        options.addOption(debugOption);

        Option conf = new Option("c", "conf", true, "Config folder");
        conf.setType(String.class);
        options.addOption(conf);

        Option test = new Option(null, "test", true, "Add test environment message to OpenTrans file");
        options.addOption(test);

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args);
        boolean showHelp = false;
        if (cmd.hasOption("help")) {
            showHelp = true;
        }

        boolean isMultiple = cmd.hasOption("m");

        InputStream s;
        if (cmd.hasOption("in")) {
            s = new FileInputStream(cmd.getOptionValue("in"));
        } else {
            s = System.in;
        }
        PushbackInputStream buffered = new PushbackInputStream(s, 8);
        Pair<InputStream, Converter.FileType> detected = Converter.detectFileType(buffered);

        File outFile = null;
        if (cmd.hasOption("out")) {
            outFile = new File(cmd.getOptionValue("out"));
        } else {
            if (cmd.hasOption("in")) {
                if (isMultiple) {
                    outFile = new File(cmd.getOptionValue("in")+"_out");
                } else {
                    switch (detected.snd) {
                        case Edifact:
                            outFile = new File(cmd.getOptionValue("in") + ".xml");
                            break;
                        case OpenTrans:
                            outFile = new File(cmd.getOptionValue("in") + ".edi");
                            break;
                    }

                }
            } else if (isMultiple) {
                showHelp = true;
            }
        }
        if (showHelp) {
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp( "openedi", options );
            return;
        }

        if (isMultiple) {
            if (!outFile.exists()) {
                outFile.mkdirs();
            }
        }

        boolean isTestEnvironment = cmd.hasOption("test");

        String confPath = cmd.getOptionValue("conf");
        if (confPath == null) {
            confPath = "./conf";
        }
        Config config = new Config(confPath, isTestEnvironment);

        switch (detected.snd) {
            case OpenTrans:
                openTransToEdifact(detected.fst, outFile, cmd, config);
                break;
            case Edifact:
                edifactToOpenTrans(detected.fst, outFile, cmd, config, isTestEnvironment);
                break;
        }
        sendEmail(cmd, outFile);
    }

    static void edifactToOpenTrans(InputStream in, File outFile, CommandLine cmd, Config config, boolean isTestEnvironment) throws Exception {
        boolean isMultiple = cmd.hasOption("m");
        EdifactReader edifactReader = new EdifactReader();
        ArrayList<com.ywesee.java.yopenedi.Edifact.Order> ediOrders = edifactReader.run(in);
        boolean useStdout = outFile == null;
        if (!useStdout) {
            System.out.println("Detected " + ediOrders.size() + " orders");
        }
        if (ediOrders.size() > 1 && !isMultiple) {
            System.out.println("Only the first order is used, if you want to export multiple orders, use the -m flag.");
        }
        Converter converter = new Converter(config);
        converter.shouldMergeContactDetails = !cmd.hasOption("no-merge-contact-details");
        for (com.ywesee.java.yopenedi.Edifact.Order edi : ediOrders) {
            Order otOrder = converter.orderToOpenTrans(edi);
            if (isTestEnvironment) {
                otOrder.isTestEnvironment = true;
            }
            OutputStream out;
            if (outFile != null) {
                File targetFile;
                if (isMultiple) {
                    targetFile = new File(outFile, otOrder.id + ".xml");
                } else {
                    targetFile = outFile;
                }
                System.out.println("Outputting order(id=" + otOrder.id + ") to " + targetFile.getAbsolutePath());
                out = new FileOutputStream(targetFile);
            } else {
                out = System.out;
            }
            otOrder.write(out, config, StandardCharsets.UTF_8);
            out.close();
            if (!isMultiple) {
                break;
            }
        }
    }

    static void openTransToEdifact(InputStream in, File outFile, CommandLine cmd, Config config) throws Exception {
        Converter converter = new Converter(config);
        OutputStream out;
        if (outFile != null) {
            out = new FileOutputStream(outFile);
            System.out.println("Outputting to " + outFile.getAbsolutePath());
        } else {
            out = System.out;
        }
        Pair<Converter.FileType, Writable> result = converter.run(in);
        result.snd.write(out, config, StandardCharsets.ISO_8859_1);

        out.flush();
        if (out instanceof FileOutputStream) {
            FileDescriptor fd = ((FileOutputStream)out).getFD();
            if (fd != null) {
                fd.sync();
            }
        }
        out.close();
    }

    static void sendEmail(CommandLine cmd, File file) {
        boolean showDebugMessages = true;
        String mailHost = cmd.getOptionValue("mail-host"); // smtp.gmail.com
        String mailPort = cmd.getOptionValue("mail-port"); // 587
        String mailSubject;
        if (cmd.hasOption("mail-subject")) {
            mailSubject = cmd.getOptionValue("mail-subject");
        } else {
            mailSubject = "No Subject";
        }
        boolean mailSecure = cmd.hasOption("mail-secure");
        String username = cmd.getOptionValue("mail-username");
        String password = cmd.getOptionValue("mail-password");

        String to = cmd.getOptionValue("mail-to");
        String from;
        if (cmd.hasOption("mail-from")) {
            from = cmd.getOptionValue("mail-from");
        } else {
            from = username;
        }

        boolean wantToSendEmail = to != null;
        if (!wantToSendEmail) {
            return;
        }
        if (wantToSendEmail && (mailHost == null || mailPort == null || username == null || password == null)) {
            System.err.println("Please specify all --mail-host --mail-port --mail-username --mail-password to send email");
            return;
        }
        if (file == null) {
            System.err.println("To send an email, you need to use the -o/--out option.");
            return;
        }

        Properties prop = new Properties();
        prop.put("mail.smtp.host", mailHost);
        prop.put("mail.smtp.port", mailPort);
        prop.put("mail.smtp.auth", "true");
        if (mailSecure) {
            prop.put("mail.smtp.starttls.enable", "true"); //TLS
        }

        Session session = Session.getInstance(prop,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                    }
                });
        if (cmd.hasOption("debug")) {
            session.setDebug(showDebugMessages);
        }
        try {

            System.out.println("Sending email to " + to);

            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.setRecipients(
                    Message.RecipientType.TO,
                    InternetAddress.parse(to)
            );
            message.setSubject(mailSubject);
            Multipart multipart = new MimeMultipart();
            BodyPart messageBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(file);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(file.getName());
            multipart.addBodyPart(messageBodyPart);

            // Send the complete message parts
            message.setContent(multipart);

            Transport.send(message);

            System.out.println("Finished sending email");

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
}
